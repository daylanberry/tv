[{"/Users/daylanberry/Desktop/tv/src/index.js":"1","/Users/daylanberry/Desktop/tv/src/components/Header.js":"2","/Users/daylanberry/Desktop/tv/src/App.js":"3","/Users/daylanberry/Desktop/tv/src/components/DisplayShow.js":"4","/Users/daylanberry/Desktop/tv/src/components/SeasonList.js":"5","/Users/daylanberry/Desktop/tv/src/components/Episode.js":"6","/Users/daylanberry/Desktop/tv/src/components/SeasonListHeader.js":"7","/Users/daylanberry/Desktop/tv/src/reportWebVitals.js":"8","/Users/daylanberry/Desktop/tv/src/components/ReplaceShow.js":"9","/Users/daylanberry/Desktop/tv/src/components/Loader.js":"10"},{"size":547,"mtime":1607643673226,"results":"11","hashOfConfig":"12"},{"size":606,"mtime":1607724366743,"results":"13","hashOfConfig":"12"},{"size":4005,"mtime":1608061219083,"results":"14","hashOfConfig":"12"},{"size":1017,"mtime":1607892955469,"results":"15","hashOfConfig":"12"},{"size":551,"mtime":1607894714196,"results":"16","hashOfConfig":"12"},{"size":1173,"mtime":1607893714335,"results":"17","hashOfConfig":"12"},{"size":377,"mtime":1607892572827,"results":"18","hashOfConfig":"12"},{"size":362,"mtime":1606166484534,"results":"19","hashOfConfig":"12"},{"size":2614,"mtime":1607903756986,"results":"20","hashOfConfig":"12"},{"size":365,"mtime":1607726360652,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"yf16zj",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/daylanberry/Desktop/tv/src/index.js",[],["50","51"],"/Users/daylanberry/Desktop/tv/src/components/Header.js",["52"],"import React from 'react';\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\n\n\nconst Header = ({handleSearchChange, handleSubmit}) => {\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" style={{display: 'flex', justifyContent: 'space-between'}}>\n      <Navbar.Brand href='/'>Episode Switcher</Navbar.Brand>\n      <Form onSubmit={handleSubmit} inline>\n        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" onChange={handleSearchChange}/>\n        <Button type='submit' variant=\"outline-info\">Search</Button>\n      </Form>\n    </Navbar>\n  )\n}\n\nexport default Header;","/Users/daylanberry/Desktop/tv/src/App.js",["53"],"/Users/daylanberry/Desktop/tv/src/components/DisplayShow.js",["54","55"],"import React from 'react';\nimport parse from 'html-react-parser';\nimport './DisplayShow.styles.css';\nimport naImage from '../assets/naImage.jpg'\nimport moment from 'moment'\n\nconst DisplayShow = ({show: {name, genres, premiered, summary, image}}) => {\n\n  const genreRenderer = () => {\n    return genres.map((g, i) => (\n      <span key={i}>{g} | </span>\n    ))\n  }\n\n  let parsedHtml = summary ? summary.replace(/<[^>]+>/g, '') : '';\n  let text = parsedHtml.length < 500 ? parsedHtml : parsedHtml.slice(0, 500) + '...'\n\n\n  return (\n    <div className='show-container'>\n      <div className='main-img'>\n        <img\n          src={image && image.medium ? image.medium: naImage}\n        />\n      </div>\n      <div className='show-info'>\n        <h3>{name}</h3>\n        <div className='season-desc'>\n          {genreRenderer()}\n          <span>Premiered on {moment(premiered).format('MMM, D, Y')}</span>\n        </div>\n        <div>\n          {text}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DisplayShow;",["56","57"],"/Users/daylanberry/Desktop/tv/src/components/SeasonList.js",[],"/Users/daylanberry/Desktop/tv/src/components/Episode.js",["58","59"],"import React from 'react';\nimport moment from 'moment'\nimport Truncate from 'react-truncate-html';\nimport SeasonListHeader from './SeasonListHeader';\nimport naImage from '../assets/naImage.jpg'\nimport './Episode.styles.css'\n\nconst Episode = ({ep, numOfEpisodesInSeason}) => {\n\n  let description = ep.summary ? ep.summary.replace(/<[^>]+>/g, '') : '';\n  let text = description.length < 200 ? description : description.slice(0, 190) + '...'\n\n  let aired = moment(ep.airdate).format('MMM, D, Y')\n\n  return (\n    <>\n      {\n        ep.number === 1 && (\n          <SeasonListHeader sNum={ep.season} numOfEpisodes={numOfEpisodesInSeason} aired={aired}/>\n        )\n      }\n      <div className='ep-container'>\n        <div>\n          <img\n            src={ep.image ? ep.image.medium : naImage}\n            className='ep-image'\n          />\n        </div>\n        <div className='ep-desc'>\n          <h6>{ep.name}</h6>\n          <span className='ep-info'>\n            Season {ep.season} | Episode: {ep.number} | {aired}\n          </span>\n\n          <div className='ep-body-text'>\n            {text}\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Episode",["60","61"],"/Users/daylanberry/Desktop/tv/src/components/SeasonListHeader.js",["62"],"import React from 'react';\nimport moment from 'moment';\n\nconst SeasonListHeader = ({sNum, numOfEpisodes, aired}) => {\n\n  return (\n    <div style={{marginTop: '30px', padding: '10px'}}>\n      <h4>Season {sNum}</h4>\n      <div style={{fontWeight: '200'}}>\n        {numOfEpisodes} episodes | Aired {aired}\n      </div>\n      <hr/>\n    </div>\n  )\n}\n\nexport default SeasonListHeader","/Users/daylanberry/Desktop/tv/src/reportWebVitals.js",[],["63","64"],"/Users/daylanberry/Desktop/tv/src/components/ReplaceShow.js",[],"/Users/daylanberry/Desktop/tv/src/components/Loader.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":2,"column":18,"nodeType":"71","messageId":"72","endLine":2,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":36,"column":6,"nodeType":"75","endLine":36,"endColumn":8,"suggestions":"76"},{"ruleId":"69","severity":1,"message":"77","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":13},{"ruleId":"78","severity":1,"message":"79","line":22,"column":9,"nodeType":"80","endLine":24,"endColumn":11},{"ruleId":"65","replacedBy":"81"},{"ruleId":"67","replacedBy":"82"},{"ruleId":"69","severity":1,"message":"83","line":3,"column":8,"nodeType":"71","messageId":"72","endLine":3,"endColumn":16},{"ruleId":"78","severity":1,"message":"79","line":24,"column":11,"nodeType":"80","endLine":27,"endColumn":13},{"ruleId":"65","replacedBy":"84"},{"ruleId":"67","replacedBy":"85"},{"ruleId":"69","severity":1,"message":"86","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":14},{"ruleId":"65","replacedBy":"87"},{"ruleId":"67","replacedBy":"88"},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'pickShowByNameOrRandomly'. Either include it or remove the dependency array.","ArrayExpression",["91"],"'parse' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["89"],["90"],"'Truncate' is defined but never used.",["89"],["90"],"'moment' is defined but never used.",["89"],["90"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [pickShowByNameOrRandomly]",{"range":"94","text":"95"},[985,987],"[pickShowByNameOrRandomly]"]